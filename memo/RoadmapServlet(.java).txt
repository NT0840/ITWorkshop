// パス「/simpleRoadmapCreator/src/main/java/servlet/RoadmapServlet.java」

package servlet;

import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import bo.RoadmapLogic;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.ChildElement;
import model.ParentElement;
import model.Roadmap;
import model.RoadmapId;
import model.UserId;

@WebServlet("/RoadmapServlet")
public class RoadmapServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String forwardPath = null;
		// サーブレットクラスの動作を決定する「action」の値をリクエストパラメータから取得
		String action = request.getParameter("action");
		if(action == null) {
			forwardPath = "WEB-INF/jsp/roadmap.jsp";
		} else if(action.equals("new")) {
			forwardPath = "WEB-INF/jsp/roadmapNew.jsp";
		}
		// フォワード
		RequestDispatcher dispatcher = request.getRequestDispatcher(forwardPath);
		dispatcher.forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// サーブレットクラスの動作を決定する「action」の値をリクエストパラメータから取得
		String action = request.getParameter("action");
		
		HttpSession session = request.getSession();
		List<Roadmap> roadmaps  = (ArrayList<Roadmap>)session.getAttribute("roadmaps");
		
		if(action.equals("newRoadmap")) {
			final int behindInsert = 1000; // 入力値の作成順(1～999)が重複していた場合に加算する値。
			
			UserId userId = (UserId)session.getAttribute("userId");
			
			// 作成日時、更新日時セット用の現在時刻
			Timestamp now = Timestamp.valueOf(LocalDateTime.now());
			
			// セッションスコープから取得したroadmapsから、roadmapIdの最大値を取得(セット時は+1でセット)、roadmapNew.jspで入力された"roadmap-name"の値もroadmapIdインスタンスにセット
			RoadmapLogic roadmapLogic = new RoadmapLogic();
			int roadmapIdNew = roadmapLogic.findRoadmapIdMax(userId) + 1;
			String roadmapName = request.getParameter("roadmap-name");
			RoadmapId roadmapId = new RoadmapId(userId.getUserId(), roadmapIdNew, roadmapName, now, now);
			
			// roadmapNew.jspで入力した子要素・親要素の情報を取得					
			// リクエスト内のパラメーターをキーと値のMapで取得。パラメータ重複時用にString[]になっている
			Map<String, String[]> parameterMap = request.getParameterMap();
			Map<Integer, Map<Integer, ChildElement>> childElementsMap = new TreeMap<>(); // <親要素作成順、<子要素作成順、子要素情報>>
			Map<Integer, ParentElement> parentElementsMap = new TreeMap<>(); // <親要素作成順、親要素情報>
			
			// 親要素の取得
			for (String paramName : parameterMap.keySet()) {
				if (paramName.startsWith("parent-order-")) {
					// "parent-order-"の文字数の長さ分だけ省いた残りの数値だけをparentIndexとして格納
					int parentIndex = Integer.parseInt(paramName.substring("parent-order-".length()));
					// "parent-order-X"の中の値を得るだけなのでそのまま取得
					int parentOrder = Integer.parseInt(request.getParameter(paramName));
					// "parent-order-X"と同列のparent-name-Xの値を取得
					String parentName = request.getParameter("parent-name-" + parentIndex);

					// 重複する場合は末尾にputするためにbehindInsertを加算する
					if(parentElementsMap.containsKey(parentOrder)) {
						parentOrder += behindInsert;
					}
					ParentElement parentElement = new ParentElement(userId.getUserId(), roadmapId.getRoadmapId(), parentOrder, parentName, 0, "", now, now);
					parentElementsMap.put(parentOrder, parentElement);
				}
			}
			
			// 子要素の取得
			for (String paramName : parameterMap.keySet()) {
				if (paramName.startsWith("child-order-")) {
					// "-"で分割して文字列に格納、パラメータの名称の親要素部分、子要素部分を取得
					String[] parts = paramName.split("-");
					int parentIndex = Integer.parseInt(parts[2]);
					int childIndex = Integer.parseInt(parts[3]);

					int childOrder = Integer.parseInt(request.getParameter(paramName));
					int parentOrder = Integer.parseInt(request.getParameter("parent-order-" + parentIndex));
					String childName = request.getParameter("child-name-" + parentIndex + "-" + childIndex);
					int childTagNum = Integer.parseInt(request.getParameter("child-tag-" + parentIndex + "-" + childIndex));
					
					// 重複する場合は末尾にputするためにparentOrderにbehindInsertを加算する(ParentElementsMapに対応させるた目的)
					if(childElementsMap.containsKey(parentOrder)) {
						parentOrder += behindInsert;
					}
					// 子要素作成順重複確認用に、子要素に対応する親要素に関するMapを取り出す
					Map<Integer, ChildElement> innerMap = childElementsMap.get(parentOrder);
					ChildElement childElement = new ChildElement(userId.getUserId(), roadmapId.getRoadmapId(), parentOrder, childOrder, childName, childTagNum, 0, "", now, now);
					// すでに子要素のMapがある場合、childElementをputして、大元のMapへ上書き
					if(innerMap != null) {
						// 重複する場合は末尾にputするためにchildOrderにbehindInsertを加算する
						if(innerMap.containsKey(childOrder)) {
							childOrder += behindInsert;
							childElement.setChildNum(childOrder);
						}
						innerMap.put(childOrder, childElement);
						childElementsMap.put(parentOrder, innerMap);
					} else { // 子要素1つめの場合
						Map<Integer, ChildElement> innerMapNew = new TreeMap<>();
						innerMapNew.put(childOrder, childElement);
						childElementsMap.put(parentOrder, innerMapNew);
					}
				}
			}
			
			// Map内に格納した情報を各Listに連番で保存する
			int parentCount = 1; // 連番用の数字
			int childCount = 1;
			List<ParentElement> parentElements = new ArrayList<>();
			List<List<ChildElement>> childElements = new ArrayList<>();
			// 親要素, Mapに格納されているものを、キーが小さい順に値を取り出す
			for (Map.Entry<Integer, ParentElement> entry : parentElementsMap.entrySet()) {
				// 参照コピー
				ParentElement parentElement = entry.getValue();
				parentElement.setParentNum(parentCount);
				parentElements.add(parentElement);
				parentCount++;
			}
			// 子要素, Mapに格納されているものを、キーが小さい順に値を取り出す
			parentCount = 1;
			for (Map.Entry<Integer, Map<Integer, ChildElement>> entryMap : childElementsMap.entrySet()) {
				List<ChildElement> innerChildElements = new ArrayList<>();
				childCount = 1;
				
				for (Map.Entry<Integer, ChildElement> entry : entryMap.getValue().entrySet()) {
					// 参照コピー
					ChildElement childElement = entry.getValue();
					childElement.setParentNum(parentCount);
					childElement.setChildNum(childCount);
					innerChildElements.add(childElement);
					childCount++;
				}
				childElements.add(innerChildElements);
				parentCount++;
			}
			// Roadmapインスタンスを組み立ててスコープから取得したroadmapsにaddしてセッションスコープに保存
			Roadmap roadmap = new Roadmap(roadmapId, parentElements, childElements);
			roadmaps.add(roadmap);
			session.setAttribute("roadmaps", roadmaps);
			
			// 表示中roadmapインスタンスとして、roadmapIdインスタンスをセッションスコープに保存
			session.setAttribute("currentRoadmapId", roadmap.getRoadmapId());
			
			// 組み立てたRoadmapインスタンスをデータベースに保存
			Boolean isCreateRoadmap = roadmapLogic.createRoadmap(roadmap);			
		
			RequestDispatcher dispatcher = request.getRequestDispatcher("WEB-INF/jsp/roadmap.jsp");
			dispatcher.forward(request, response);
		}
	}
}
